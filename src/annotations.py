from pathlib import Path
import logging

import pandas

from src import const
import json

logger = logging.getLogger(__name__)


def label_to_int(label: str) -> int:
    """
    Convert a label string to an integer.
    This function is a placeholder and should be replaced with actual logic.

    :param label: the string representation of the label
    :type label: int
    :return: the integer representation of the label
    :rtype: int

    """
    # Example conversion logic, replace with actual implementation
    label_mapping = {
        "no_tap": 0,
        "left_tap": 1,
        "right_tap": 2,
    }
    return label_mapping.get(label, 0)  # Return 0 if label not found


def generate_annotations_csv(
    lstudio_annotations_path: Path, frames_path: Path
) -> tuple[pandas.DataFrame, Path]:
    """
    Generates a csv file that map the frames in the frames_path directory to their corresponding labels from the lstudio annotations file.
    The annotations file generated by the LStudio tool is expected to be the JSON-MINIFIED format. The frames in the frames_path folder
    are expected to be named in the format "frame_0.png" where the number corresponds to the frame index in the original video.

    :param lstudio_annotations_path: Path to the LStudio annotations file in the JSON-MINIFIED format
    :type lstudio_annotations_path: pathlib.Path
    :param frames_path: Path the folder containing the frames files.
    :type frames_path: pathlib.Path
    :return: The Pandas representation of the annotations mapping and the location of the csv file generated.
    :rtype: tuple[pandas.DataFrame, Path]
    """
    paths = []
    labels = []

    with open(lstudio_annotations_path, "r") as file:
        raw_lstudio_annotations = json.load(file)

    # Todo: create pydantic model for the annotations.
    # Todo: n^2 complexity, optimize this.
    for frame in frames_path.iterdir():
        if frame.suffix != ".png":
            logger.warning(f"File {frame} is not a PNG image, skipping.")
            continue
        for lstdudio_range in raw_lstudio_annotations[0]["videoLabels"]:
            start_idx = lstdudio_range["ranges"][0]["start"]
            stop_idx = lstdudio_range["ranges"][0]["end"]
            label = lstdudio_range["timelinelabels"][0]
            frame_idx = int(frame.stem.split("_")[1])
            if start_idx <= frame_idx <= stop_idx:
                paths.append(frame)
                # TODO: the label mapper should be a functions parameters passed by injection.
                labels.append(label_to_int(label))
                logger.info(f"Added annotation for frame {frame_idx}: {label}")
                break

    annotations_dict = {const.PATH_COL: paths, const.LABEL_COL: labels}
    annotations_df = pandas.DataFrame.from_dict(data=annotations_dict)
    annotations_df.to_csv(
        lstudio_annotations_path.parent / "annotations.csv", index=False
    )
    return annotations_df, lstudio_annotations_path.parent / "annotations.csv"
